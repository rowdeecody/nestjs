git clone https://github.com/nestjs/typescript-starter.git nestjs
docker-compose --env-file .docker.env up -d --build 

docker compose --env-file .docker.env build --no-cache 
docker compose --env-file .docker.env up -d

docker exec -it nestjs-app sh
docker exec -u node -it nestjs-app sh
npm install -g @nestjs/cli
npm i @nestjs/mapped-types @nestjs/typeorm @nestjs/websockets @nestjs/platform-socket.io @nestjs/config class-validator class-transformer m typeorm pg socket.io

npx nest g module users
npx nest g service users
npx nest g controller users
npx nest g module features/users
sudo chown -R rudy:rudy nestjs


Dockerfile for NestJS Application
# Use Node.js base image
FROM node:18-alpine

# Set working directory
WORKDIR /usr/src/app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the project files
COPY . .

# Build the NestJS project
RUN npm run build

# Expose port
EXPOSE 3000

# Run the app
CMD ["node", "dist/main"]
























 # Development stage
   FROM node:20-alpine AS development
   WORKDIR /usr/src/app
   COPY package*.json ./
   RUN npm ci
   COPY . .
   USER node

   # Build stage
   FROM node:20-alpine AS build
   WORKDIR /usr/src/app
   COPY package*.json ./
   COPY --from=development /usr/src/app/node_modules ./node_modules
   COPY . .
   RUN npm run build
   ENV NODE_ENV production
   RUN npm ci --only=production && npm cache clean --force
   USER node

   # Production stage
   FROM node:20-alpine AS production
   WORKDIR /usr/src/app
   COPY --from=build /usr/src/app/node_modules ./node_modules
   COPY --from=build /usr/src/app/dist ./dist
   CMD ["node", "dist/main.js"]